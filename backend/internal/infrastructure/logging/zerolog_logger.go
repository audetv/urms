// backend/internal/infrastructure/logging/zerolog_logger.go
package logging

import (
	"context"
	"os"
	"runtime"
	"strings"
	"time"

	"github.com/audetv/urms/internal/core/ports"
	"github.com/rs/zerolog"
)

// ZerologLogger —Ä–µ–∞–ª–∏–∑—É–µ—Ç ports.Logger –∏—Å–ø–æ–ª—å–∑—É—è zerolog
type ZerologLogger struct {
	logger zerolog.Logger
}

// NewZerologLogger —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π structured logger
func NewZerologLogger(level string, format string) *ZerologLogger {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	zerologLevel, err := zerolog.ParseLevel(level)
	if err != nil {
		zerologLevel = zerolog.InfoLevel
	}
	zerolog.SetGlobalLevel(zerologLevel)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º output –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
	var logger zerolog.Logger
	if format == "json" {
		logger = zerolog.New(os.Stdout).With().Timestamp().Logger()
	} else {
		// Console output –¥–ª—è development
		output := zerolog.ConsoleWriter{
			Out:        os.Stdout,
			TimeFormat: time.RFC3339,
		}
		logger = zerolog.New(output).With().Timestamp().Logger()
	}

	return &ZerologLogger{
		logger: logger,
	}
}

// getCallerInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: getCallerInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
func (l *ZerologLogger) getCallerInfo() string {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä—ã —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞
	pc := make([]uintptr, 10)
	n := runtime.Callers(3, pc) // –ù–∞—á–∏–Ω–∞–µ–º —Å 3 –∫–∞–¥—Ä–∞
	if n == 0 {
		return "unknown:0"
	}

	pc = pc[:n]
	frames := runtime.CallersFrames(pc)

	for {
		frame, more := frames.Next()

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ logging —Ñ–∞–π–ª—ã
		if !strings.Contains(frame.File, "runtime/") &&
			!strings.Contains(frame.File, "zerolog") &&
			!strings.Contains(frame.File, "logging/") {
			// –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞
			shortFile := frame.File
			if idx := strings.LastIndex(frame.File, "/"); idx != -1 {
				shortFile = frame.File[idx+1:]
			}

			// –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
			funcName := frame.Function
			if idx := strings.LastIndex(frame.Function, "/"); idx != -1 {
				funcName = frame.Function[idx+1:]
			}

			return shortFile + ":" + funcName + ":" + string(rune(frame.Line))
		}

		if !more {
			break
		}
	}

	return "unknown:0"
}

// getRequestID –∏–∑–≤–ª–µ–∫–∞–µ—Ç correlation ID –∏–∑ context
func (l *ZerologLogger) getRequestID(ctx context.Context) string {
	if ctx == nil {
		return ""
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π header
	if requestID, ok := ctx.Value("X-Request-ID").(string); ok {
		return requestID
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π key
	if requestID, ok := ctx.Value(ports.CorrelationIDKey).(string); ok {
		return requestID
	}

	return ""
}

// Debug –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º DEBUG
func (l *ZerologLogger) Debug(ctx context.Context, msg string, fields ...interface{}) {
	logger := l.logger.Debug().
		Str("caller", l.getCallerInfo()).
		Str("correlation_id", l.getRequestID(ctx))

	l.addFields(logger, fields...)
	logger.Msg(msg)
}

// Info –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º INFO
func (l *ZerologLogger) Info(ctx context.Context, msg string, fields ...interface{}) {
	logger := l.logger.Info().
		Str("caller", l.getCallerInfo()).
		Str("correlation_id", l.getRequestID(ctx))

	l.addFields(logger, fields...)
	logger.Msg(msg)
}

// Warn –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º WARN
func (l *ZerologLogger) Warn(ctx context.Context, msg string, fields ...interface{}) {
	logger := l.logger.Warn().
		Str("caller", l.getCallerInfo()).
		Str("correlation_id", l.getRequestID(ctx))

	l.addFields(logger, fields...)
	logger.Msg(msg)
}

// Error –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º ERROR
func (l *ZerologLogger) Error(ctx context.Context, msg string, fields ...interface{}) {
	logger := l.logger.Error().
		Str("caller", l.getCallerInfo()).
		Str("correlation_id", l.getRequestID(ctx))

	l.addFields(logger, fields...)
	logger.Msg(msg)
}

// addFields –¥–æ–±–∞–≤–ª—è–µ—Ç structured fields –∫ –ª–æ–≥–≥–µ—Ä—É
// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: addFields - —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
func (l *ZerologLogger) addFields(logger *zerolog.Event, fields ...interface{}) {
	if len(fields) == 0 {
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—ã key-value –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
	for i := 0; i < len(fields)-1; i += 2 {
		if key, ok := fields[i].(string); ok {
			logger.Interface(key, fields[i+1])
		}
	}
}

// WithContext —Å–æ–∑–¥–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º context
func (l *ZerologLogger) WithContext(ctx context.Context) context.Context {
	return l.logger.WithContext(ctx)
}
