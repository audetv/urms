// backend/internal/infrastructure/email/retry_manager.go
package email

import (
	"context"
	"fmt"
	"log"
	"math"
	"time"
)

// RetryConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
type RetryConfig struct {
	MaxAttempts   int
	BaseDelay     time.Duration
	MaxDelay      time.Duration
	BackoffFactor float64
}

// DefaultRetryConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func DefaultRetryConfig() RetryConfig {
	return RetryConfig{
		MaxAttempts:   3,
		BaseDelay:     2 * time.Second,
		MaxDelay:      30 * time.Second,
		BackoffFactor: 1.5,
	}
}

// RetryManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
type RetryManager struct {
	config RetryConfig
}

// NewRetryManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
func NewRetryManager(config RetryConfig) *RetryManager {
	return &RetryManager{
		config: config,
	}
}

// ExecuteWithRetry –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
func (m *RetryManager) ExecuteWithRetry(ctx context.Context, operation string, fn func() error) error {
	var lastErr error

	for attempt := 1; attempt <= m.config.MaxAttempts; attempt++ {
		log.Printf("üîÑ %s attempt %d/%d", operation, attempt, m.config.MaxAttempts)

		err := fn()
		if err == nil {
			if attempt > 1 {
				log.Printf("‚úÖ %s succeeded on attempt %d", operation, attempt)
			}
			return nil
		}

		lastErr = err

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π
		if retryableErr, ok := err.(interface{ IsRetryable() bool }); ok {
			if !retryableErr.IsRetryable() {
				log.Printf("‚ùå %s failed with permanent error: %v", operation, err)
				return err
			}
		}

		// –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã—Ö–æ–¥–∏–º
		if attempt == m.config.MaxAttempts {
			log.Printf("‚ùå %s failed after %d attempts: %v", operation, m.config.MaxAttempts, err)
			return fmt.Errorf("operation failed after %d attempts: %w", m.config.MaxAttempts, err)
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
		delay := m.calculateDelay(attempt)
		log.Printf("‚è≥ %s failed, retrying in %v: %v", operation, delay, err)

		// –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
		select {
		case <-time.After(delay):
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
		case <-ctx.Done():
			return fmt.Errorf("operation cancelled: %w", ctx.Err())
		}
	}

	return lastErr
}

// calculateDelay –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
func (m *RetryManager) calculateDelay(attempt int) time.Duration {
	delay := time.Duration(float64(m.config.BaseDelay) * math.Pow(m.config.BackoffFactor, float64(attempt-1)))
	if delay > m.config.MaxDelay {
		return m.config.MaxDelay
	}
	return delay
}
