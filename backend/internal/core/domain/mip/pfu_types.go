// backend/internal/core/domain/pfu_types.go
package domain

import "time"

// ВАЖНО: Этот файл содержит типы данных для реализации полной функции управления (ПФУ).
// ПФУ - это система стереотипов отношений и стереотипов преобразований информационных
// модулей, составляющих информационную базу управляющего субъекта, моделирующего на
// их основе поведение объекта управления.
// НЕ УДАЛЯТЬ КОММЕНТАРИИ - они объясняют концепцию ПФУ и ее этапы.

// EnvironmentalFactor - фактор среды (этап 1 ПФУ)
// Факторы среды - это явления, которые "давят на психику" и вызывают
// потребность в управлении. Без выявления факторов управление не начинается.
type EnvironmentalFactor struct {
	// ID - уникальный идентификатор фактора среды
	ID string

	// Type - тип фактора среды
	// Определяет природу и характер воздействия фактора на систему
	Type FactorType

	// Intensity - интенсивность воздействия фактора
	// Количественная оценка силы "давления на психику" (0-1)
	// Высокая интенсивность требует немедленного реагирования
	Intensity float64

	// Pattern - паттерн распознавания фактора
	// Структурный шаблон для идентификации и классификации фактора
	Pattern Pattern

	// Priority - приоритет реакции на фактор
	// Определяет очередность обработки среди других факторов
	Priority Priority

	// ManagementGoal - цель управления этим фактором
	// Описывает желаемое состояние системы после управления фактором
	ManagementGoal string

	// ResolutionDeadline - срок решения проблемы
	// Временные рамки, в которые должен быть решен вопрос управления
	ResolutionDeadline *time.Time

	// SuccessMetrics - метрики успешности управления
	// Количественные показатели для оценки эффективности управления фактором
	SuccessMetrics []Metric

	// ExpectedResponse - ожидаемый ответ на фактор
	// Стандартная или рекомендуемая реакция системы на данный тип фактора
	ExpectedResponse string
}

// Stereotype - стереотип распознавания (этап 2 ПФУ)
// Стереотипы - это навыки распознавания факторов на будущее, которые
// формируются в процессе управления и распространяются в культуре системы.
type Stereotype struct {
	// Pattern - паттерн для распознавания
	// Структурный шаблон, ассоциированный с определенным типом факторов
	Pattern Pattern

	// Response - стереотипный ответ
	// Автоматическая или рекомендуемая реакция на распознанный паттерн
	Response ResponsePattern

	// Confidence - уверенность в стереотипе
	// Оценка надежности стереотипа на основе исторического опыта (0-1)
	Confidence float64

	// LearnRate - скорость обучения стереотипу
	// Определяет как быстро стереотип адаптируется на основе нового опыта (0-1)
	LearnRate float64

	// UsageCount - количество использований стереотипа
	// Отслеживает частоту применения стереотипа для оценки его актуальности
	UsageCount int

	// LastUsed - время последнего использования
	// Помогает идентифицировать устаревшие или редко используемые стереотипы
	LastUsed time.Time
}

// ResponsePattern - паттерн ответа на распознанный фактор
// Определяет стандартную реакцию системы на определенный тип факторов среды
type ResponsePattern struct {
	// Action - действие в ответ на фактор
	// Конкретное действие или последовательность действий для управления фактором
	Action string

	// Params - параметры выполнения действия
	// Дополнительные настройки и параметры для кастомизации реакции
	Params map[string]interface{}

	// Condition - условие применения паттерна
	// Дополнительные условия, которые должны быть выполнены для применения паттерна
	Condition Condition
}

// Condition - условие применения правила или паттерна
// Определяет контекстные ограничения для активации определенного поведения
type Condition struct {
	// Field - поле для проверки
	// Атрибут или метрика системы, значение которой проверяется
	Field string

	// Operator - оператор сравнения
	// Математический или логический оператор для сравнения значений
	Operator string

	// Value - эталонное значение
	// Значение, с которым сравнивается текущее значение поля
	Value interface{}
}

// GoalVector - вектор целей управления (этап 3 ПФУ)
// Вектор целей - это иерархически упорядоченный набор целей управления
// в отношении выявленных факторов среды, вносимый в общий вектор целей субъекта.
type GoalVector struct {
	// Goals - список целей управления
	// Иерархически упорядоченные цели для достижения желаемых состояний
	Goals []Goal

	// Priorities - приоритеты целей
	// Относительная важность различных целей для распределения ресурсов
	Priorities map[string]int

	// Constraints - ограничения целей
	// Ограничения и условия, которые должны учитываться при достижении целей
	Constraints []GoalConstraint

	// Timeframe - временной горизонт целей
	// Общий временной промежуток для достижения совокупности целей
	Timeframe time.Duration
}

// Goal - цель управления в векторе целей
// Конкретная, измеримая и достижимая цель управления сущностью или процессом
type Goal struct {
	// ID - уникальный идентификатор цели
	ID string

	// Description - описание цели
	// Человеко-читаемое описание желаемого состояния или результата
	Description string

	// Priority - приоритет цели
	// Определяет очередность работы над целью относительно других целей
	Priority Priority

	// Deadline - срок достижения цели
	// Конкретная дата или временной промежуток для достижения цели
	Deadline *time.Time

	// Metrics - метрики достижения цели
	// Количественные показатели для оценки прогресса и успешности достижения цели
	Metrics []Metric

	// Status - статус цели
	// Текущее состояние работы над целью (активна, достигнута, провалена)
	Status GoalStatus
}

// GoalStatus - статус цели управления
type GoalStatus string

const (
	GoalStatusActive    GoalStatus = "active"    // Цель активна и выполняется
	GoalStatusAchieved  GoalStatus = "achieved"  // Цель успешно достигнута
	GoalStatusFailed    GoalStatus = "failed"    // Цель не достигнута в установленный срок
	GoalStatusCancelled GoalStatus = "cancelled" // Цель отменена до завершения
)

// GoalConstraint - ограничение цели управления
// Определяет границы и условия, которые должны соблюдаться при работе над целью
type GoalConstraint struct {
	// Type - тип ограничения
	// Характер ограничения (ресурсное, временное, технологическое, нормативное)
	Type string

	// Value - значение ограничения
	// Конкретное значение или диапазон ограничения
	Value interface{}
}

// Concept - концепция управления (этап 4 ПФУ)
// Концепция управления создаётся на основе решения задачи об устойчивости
// в смысле предсказуемости поведения и включает генеральную и частные концепции.
type Concept struct {
	// ID - уникальный идентификатор концепции
	ID string

	// Type - тип концепции
	// Уровень концепции (стратегическая, тактическая, операционная)
	Type ConceptType

	// Description - описание концепции
	// Подробное описание подхода к управлению и достижению целей
	Description string

	// Strategy - генеральная стратегия управления
	// Общий план и направление действий для достижения целей управления
	Strategy Strategy

	// Tactics - частные тактики управления
	// Конкретные методы и приемы для реализации стратегии в различных условиях
	Tactics []Tactic

	// RiskModel - модель рисков концепции
	// Анализ потенциальных рисков и способов их минимизации
	RiskModel RiskModel

	// Stability - модель устойчивости концепции
	// Оценка способности концепции обеспечивать предсказуемое поведение
	Stability StabilityModel
}

// ConceptType - тип концепции управления
type ConceptType string

const (
	ConceptTypeStrategic   ConceptType = "strategic"   // Стратегическая концепция - долгосрочное планирование
	ConceptTypeTactical    ConceptType = "tactical"    // Тактическая концепция - среднесрочное планирование
	ConceptTypeOperational ConceptType = "operational" // Операционная концепция - краткосрочное управление
)

// Strategy - генеральная стратегия управления
// Определяет общий подход и направление действий для достижения целей
type Strategy struct {
	// ID - уникальный идентификатор стратегии
	ID string

	// Name - название стратегии
	// Краткое описательное название стратегического подхода
	Name string

	// Description - описание стратегии
	// Подробное описание принципов, методов и ожидаемых результатов стратегии
	Description string
}

// Tactic - частная тактика управления
// Конкретный метод или прием для реализации стратегии в определенных условиях
type Tactic struct {
	// ID - уникальный идентификатор тактики
	ID string

	// Name - название тактики
	// Краткое описательное название тактического подхода
	Name string

	// Actions - действия тактики
	// Конкретные действия и операции для реализации тактики
	Actions []Action
}

// RiskModel - модель рисков концепции управления
// Анализирует потенциальные угрозы и возможности, связанные с реализацией концепции
type RiskModel struct {
	// Risks - идентифицированные риски
	// Список потенциальных проблем и неблагоприятных событий
	Risks []Risk
}

// Risk - риск реализации концепции управления
// Потенциальное событие, которое может негативно повлиять на достижение целей
type Risk struct {
	// ID - уникальный идентификатор риска
	ID string

	// Description - описание риска
	// Подробное описание природы, причин и последствий риска
	Description string

	// Probability - вероятность реализации риска
	// Оценка вероятности возникновения риска (0-1)
	Probability float64

	// Impact - влияние риска
	// Оценка серьезности последствий при реализации риска (0-1)
	Impact float64
}

// StabilityModel - модель устойчивости концепции
// Оценивает способность концепции обеспечивать предсказуемое поведение системы
// в условиях изменяющейся среды и внутренних возмущений
type StabilityModel struct {
	// Level - уровень устойчивости
	// Общая оценка устойчивости концепции (stable, marginal, unstable)
	Level string

	// Factors - факторы устойчивости
	// Ключевые аспекты, влияющие на устойчивость концепции
	Factors []StabilityFactor
}

// StabilityFactor - фактор устойчивости концепции
// Конкретный аспект концепции, влияющий на ее способность обеспечивать
// предсказуемое поведение системы
type StabilityFactor struct {
	// Name - название фактора
	// Описательное название аспекта устойчивости
	Name string

	// Value - значение фактора
	// Количественная оценка вклада фактора в общую устойчивость (0-1)
	Value float64
}

// Structure - управляющая структура (этапы 5-7 ПФУ)
// Управляющие структуры организуются или реорганизуются для несения целевых функций
// и реализации концепции управления. Подлежат контролю и совершенствованию.
type Structure struct {
	// ID - уникальный идентификатор структуры
	ID string

	// Type - тип структуры
	// Характер и назначение управляющей структуры
	Type StructureType

	// Concept - реализуемая концепция
	// Концепция управления, для реализации которой создана структура
	Concept *Concept

	// Components - компоненты структуры
	// Составные части и элементы управляющей структуры
	Components []StructureComponent

	// Status - статус структуры
	// Текущее состояние и активность структуры
	Status StructureStatus

	// Efficiency - эффективность структуры
	// Оценка эффективности выполнения целевых функций (0-1)
	Efficiency float64

	// MinEfficiencyThreshold - минимальный порог эффективности
	// Нижняя граница эффективности, ниже которой структура подлежит ликвидации
	MinEfficiencyThreshold float64

	// CreatedAt - время создания структуры
	// Момент создания или активации структуры
	CreatedAt time.Time

	// LastUsed - время последнего использования
	// Момент последней активации или применения структуры
	LastUsed time.Time

	// UsageCount - счетчик использований
	// Количество активаций или применений структуры
	UsageCount int
}

// StructureType - тип управляющей структуры
type StructureType string

const (
	StructureTypeManagement     StructureType = "management"     // Управленческая структура
	StructureTypeTechnical      StructureType = "technical"      // Техническая структура
	StructureTypeOrganizational StructureType = "organizational" // Организационная структура
	StructureTypeInformational  StructureType = "informational"  // Информационная структура
)

// StructureComponent - компонент управляющей структуры
// Элемент или подсистема в составе управляющей структуры
type StructureComponent struct {
	// ID - уникальный идентификатор компонента
	ID string

	// Type - тип компонента
	// Функциональное назначение компонента в структуре
	Type string

	// Role - роль компонента
	// Конкретная функция или ответственность компонента
	Role string
}

// StructureStatus - статус управляющей структуры
type StructureStatus string

const (
	StructureStatusActive     StructureStatus = "active"     // Структура активна и функционирует
	StructureStatusInactive   StructureStatus = "inactive"   // Структура неактивна, но сохранена
	StructureStatusLiquidated StructureStatus = "liquidated" // Структура ликвидирована
	StructureStatusOptimizing StructureStatus = "optimizing" // Структура проходит оптимизацию
)

// NetworkPlan - сетевой план управления
// Используется для оптимизации управления проектами с множеством взаимосвязанных этапов
type NetworkPlan struct {
	// Nodes - узлы сетевого графика
	// Рубежи контроля, разделяющие различные этапы работы
	Nodes []NetworkNode

	// Edges - ребра сетевого графика
	// Этапы работы между рубежами контроля
	Edges []NetworkEdge
}

// NetworkNode - узел сетевого графика
// Рубеж контроля, на котором возможна однозначная оценка "выполнено - не выполнено"
type NetworkNode struct {
	// ID - уникальный идентификатор узла
	ID string

	// Name - название узла
	// Описательное название рубежа контроля
	Name string

	// Type - тип узла
	// Характер узла (старт, финиш, промежуточный)
	Type string
}

// NetworkEdge - ребро сетевого графика
// Этап работы между двумя рубежами контроля
type NetworkEdge struct {
	// From - исходный узел
	// Узел, с которого начинается этап работы
	From string

	// To - конечный узел
	// Узел, которым заканчивается этап работы
	To string

	// Cost - стоимость/длительность этапа
	// Оценка временных или ресурсных затрат на выполнение этапа
	Cost float64
}

// DynamicModel - модель динамического программирования
// Используется для оптимизации многошаговых процессов управления
type DynamicModel struct {
	// States - пространство состояний
	// Множество возможных состояний системы в процессе управления
	States []State
}

// State - состояние в динамическом программировании
// Описание системы в конкретный момент процесса управления
type State struct {
	// ID - уникальный идентификатор состояния
	ID string

	// Value - значения параметров состояния
	// Набор параметров, полностью описывающих состояние системы
	Value map[string]interface{}
}
