// backend/internal/core/domain/entity.go
package domain

import (
	"time"
)

// ВАЖНО: Этот файл определяет фундаментальную сущность (Entity) системы управления
// на основе онтологии МИП (Мера-Информация-Процесс).
// Entity представляет собой универсальный объект управления, который существует
// в триединстве МИП и участвует в иерархии управления до ИНВОУ.
// НЕ УДАЛЯТЬ КОММЕНТАРИИ - они объясняют философские и методологические основы системы.

// Entity - универсальная сущность в триединстве МИП с полной ПФУ
// Каждая сущность в системе представляет собой единство трех аспектов:
// - Мера: структурная организация и классификация
// - Информация: данные, состояния и история
// - Процесс: динамика, поведение и управление
// Сущности образуют иерархическую структуру, рекурсивно вложенную до ИНВОУ
type Entity struct {
	// ID - уникальный идентификатор сущности в системе
	// Используется для однозначной идентификации и установления отношений
	ID string

	// Type - тип сущности (тикет, новость, ресурс, процесс и т.д.)
	// Определяет роль сущности в системе управления и ее поведение
	Type EntityType

	// Name - человеко-читаемое название сущности
	// Используется для отображения и идентификации пользователями
	Name string

	// Description - подробное описание сущности и ее назначения
	// Содержит контекстную информацию для понимания сущности
	Description string

	// ТРИЕДИНСТВО МИП - фундаментальная основа каждой сущности
	// Триединство означает, что эти три аспекта неразделимы и существуют
	// только вместе, представляя разные проекции одной реальности

	// Measure - МЕРА сущности (структура, форма, отношения)
	// Определяет структурные характеристики, классификацию, связи и ограничения
	// Мера отвечает на вопрос "КАК устроена сущность?"
	Measure EntityMeasure

	// Information - ИНФОРМАЦИЯ сущности (данные, значения, факты)
	// Содержит текущее состояние, историю изменений, метрики и прогнозы
	// Информация отвечает на вопрос "ЧТО представляет собой сущность?"
	Information EntityInformation

	// Process - ПРОЦЕСС сущности (динамика, поведение, управление)
	// Определяет как сущность изменяется во времени, взаимодействует и управляется
	// Процесс отвечает на вопрос "КАК сущность действует и изменяется?"
	Process EntityProcess

	// ИЕРАРХИЯ И СВЯЗИ - отражение рекурсивности МИП до ИНВОУ
	// Каждая сущность существует в контексте иерархии управления

	// ParentID - идентификатор родительской сущности
	// Определяет принадлежность к более высокому уровню иерархии
	// nil означает, что сущность находится на верхнем уровне доступной иерархии
	ParentID *string

	// Children - идентификаторы дочерних сущностей
	// Определяют составные части или подчиненные элементы
	Children []string

	// Related - ссылки на связанные сущности
	// Определяют горизонтальные связи и зависимости между сущностями
	Related []EntityReference

	// МЕТАДАННЫЕ - служебная информация о сущности

	// CreatedAt - время создания сущности
	// Фиксирует момент возникновения сущности в системе
	CreatedAt time.Time

	// UpdatedAt - время последнего изменения сущности
	// Отслеживает актуальность информации о сущности
	UpdatedAt time.Time

	// CreatedBy - идентификатор создателя сущности
	// Определяет ответственность за создание сущности
	CreatedBy string

	// Version - версия сущности для контроля изменений
	// Используется для разрешения конфликтов и отслеживания истории
	Version int
}

// EntityMeasure - МЕРА сущности (структура, форма, отношения)
// Мера определяет структурные аспекты сущности: как она устроена,
// классифицирована, связана с другими сущностями и какие имеет ограничения
type EntityMeasure struct {
	// Categories - категории классификации сущности
	// Определяют принадлежность сущности к различным таксономическим группам
	// Используются для фильтрации, поиска и групповых операций
	Categories []Category

	// Taxonomy - таксономия сущности
	// Определяет систематическую классификацию сущности в рамках домена
	Taxonomy Taxonomy

	// Patterns - структурные паттерны сущности
	// Определяют повторяющиеся структурные шаблоны и закономерности
	// Используются для распознавания и автоматической обработки
	Patterns []Pattern

	// Relations - отношения с другими сущностями
	// Определяют структурные связи (родитель-потомок, часть-целое, зависимости)
	Relations []Relation

	// Attributes - атрибуты структуры сущности
	// Определяют качественные и количественные характеристики структуры
	Attributes []Attribute

	// Constraints - структурные ограничения сущности
	// Определяют границы возможных состояний и поведений сущности
	// Отражают физические, логические и бизнес-ограничения
	Constraints []Constraint

	// Capabilities - структурные возможности сущности
	// Определяют потенциальные способности и функции сущности
	// Отражают то, что сущность МОЖЕТ делать в принципе
	Capabilities []Capability

	// Stereotypes - стереотипы распознавания (этап 2 ПФУ)
	// Определяют автоматические реакции на распознанные паттерны
	// Формируются в процессе обучения системы и пользователей
	Stereotypes []Stereotype
}

// EntityInformation - ИНФОРМАЦИЯ сущности (данные, значения, факты)
// Информация представляет собой данные о состоянии сущности в различные
// моменты времени, включая текущее состояние, историю и прогнозы
type EntityInformation struct {
	// CurrentState - текущий срез состояния сущности
	// Представляет собой "моментальный снимок" сущности в данный момент времени
	// Содержит актуальные метрики и статус сущности
	CurrentState StateSnapshot

	// Metrics - числовые метрики сущности
	// Количественные показатели, характеризующие состояние и эффективность
	// Используются для анализа, контроля и принятия решений
	Metrics Metrics

	// History - история изменений состояния сущности
	// Хронологическая последовательность изменений состояния
	// Позволяет анализировать динамику и выявлять закономерности
	History []StateChange

	// Events - значимые события в жизни сущности
	// Ключевые моменты, оказывающие существенное влияние на сущность
	// Используются для анализа причинно-следственных связей
	Events []Event

	// Predictions - прогнозы развития сущности
	// Ожидаемые будущие состояния на основе текущих данных и моделей
	// Используются для планирования и упреждающего управления
	Predictions []Prediction

	// Scenarios - возможные сценарии развития сущности
	// Альтернативные пути развития при различных условиях и решениях
	// Используются для анализа рисков и возможностей
	Scenarios []Scenario

	// GoalVector - вектор целей управления (этап 3 ПФУ)
	// Иерархически упорядоченный набор целей управления сущностью
	// Определяет желаемые состояния и направления развития
	GoalVector GoalVector
}

// EntityProcess - ПРОЦЕСС сущности (динамика, поведение, управление)
// Процесс определяет как сущность изменяется во времени, взаимодействует
// с окружением и управляется в рамках полной функции управления (ПФУ)
type EntityProcess struct {
	// CurrentPhase - текущая фаза процесса
	// Определяет этап жизненного цикла или управления, в котором находится сущность
	CurrentPhase ProcessPhase

	// ActiveFlow - активный поток процесса
	// Определяет текущую последовательность действий и состояний
	ActiveFlow ProcessFlow

	// ControlSystem - система управления сущностью
	// Реализует полную функцию управления (ПФУ) для сущности
	// Включает предиктор-корректор, сетевое планирование и динамическое программирование
	ControlSystem ControlSystem

	// FeedbackLoops - циклы обратной связи
	// Механизмы саморегуляции и адаптации на основе обратной связи
	// Обеспечивают устойчивость и эффективность управления
	FeedbackLoops []FeedbackLoop

	// Concepts - концепции управления (этап 4 ПФУ)
	// Стратегические и тактические планы управления сущностью
	// Определяют подходы к достижению целей управления
	Concepts []Concept

	// Structures - управляющие структуры (этапы 5-7 ПФУ)
	// Организационные и технические структуры для реализации концепций
	// Подлежат совершенствованию или ликвидации по результатам контроля
	Structures []Structure
}

// Вспомогательные типы для Entity

// Taxonomy - таксономия сущности
// Систематическая классификация сущности в рамках предметной области
type Taxonomy struct {
	ID   string // Идентификатор таксономии
	Name string // Название таксономии
}

// Metrics - коллекция метрик сущности
// Набор количественных показателей для оценки состояния и эффективности
type Metrics map[string]interface{}

// StateChange - запись об изменении состояния
// Фиксирует переход сущности из одного состояния в другое
type StateChange struct {
	Timestamp time.Time     // Время изменения состояния
	FromState StateSnapshot // Исходное состояние
	ToState   StateSnapshot // Конечное состояние
	Reason    string        // Причина изменения состояния
}

// Prediction - прогноз развития сущности
// Ожидаемое будущее состояние на основе анализа текущих данных и тенденций
type Prediction struct {
	ID          string        // Идентификатор прогноза
	Description string        // Описание прогнозируемого состояния
	Confidence  float64       // Уверенность в прогнозе (0-1)
	Timeframe   time.Duration // Временной горизонт прогноза
}

// Scenario - сценарий развития сущности
// Альтернативный путь развития при определенных условиях или решениях
type Scenario struct {
	ID          string    // Идентификатор сценария
	Name        string    // Название сценария
	Probability float64   // Вероятность реализации сценария (0-1)
	Outcomes    []Outcome // Возможные исходы сценария
}

// Outcome - исход сценария
// Результат реализации определенного сценария развития
type Outcome struct {
	Description string  // Описание исхода
	Impact      float64 // Влияние исхода на систему (положительное/отрицательное)
}

// FeedbackLoop - цикл обратной связи
// Механизм регулирования процесса на основе сравнения фактических
// результатов с ожидаемыми и внесения корректировок
type FeedbackLoop struct {
	ID      string // Идентификатор цикла обратной связи
	Type    string // Тип обратной связи (негативная, позитивная, адаптивная)
	Enabled bool   // Активен ли цикл обратной связи
}

// Constraint - ограничение сущности
// Определяет границы возможных состояний, поведений или значений
type Constraint struct {
	ID          string // Идентификатор ограничения
	Description string // Описание ограничения
	Type        string // Тип ограничения (физическое, логическое, бизнес-правило)
}

// Capability - возможность сущности
// Определяет потенциальные способности, функции или действия сущности
type Capability struct {
	ID          string // Идентификатор возможности
	Description string // Описание возможности
	Type        string // Тип возможности (техническая, функциональная, бизнес-возможность)
}
