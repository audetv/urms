// backend/cmd/api/main.go
package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/audetv/urms/internal/config"
	"github.com/audetv/urms/internal/core/domain"
	"github.com/audetv/urms/internal/core/ports"
	"github.com/audetv/urms/internal/core/services"
	"github.com/audetv/urms/internal/infrastructure/common/id"
	"github.com/audetv/urms/internal/infrastructure/email"
	imapclient "github.com/audetv/urms/internal/infrastructure/email/imap"
	"github.com/audetv/urms/internal/infrastructure/health"
	"github.com/audetv/urms/internal/infrastructure/http/handlers"
	"github.com/audetv/urms/internal/infrastructure/http/middleware"
	"github.com/audetv/urms/internal/infrastructure/logging"
	persistence "github.com/audetv/urms/internal/infrastructure/persistence/email"
	"github.com/audetv/urms/internal/infrastructure/persistence/email/postgres"
	"github.com/audetv/urms/internal/infrastructure/persistence/task/inmemory"
	"github.com/gin-gonic/gin"
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
)

// backend/cmd/api/main.go
func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("‚ùå Failed to load configuration: %v", err)
	}

	// ‚úÖ –°–æ–∑–¥–∞–µ–º logger —Å—Ä–∞–∑—É –¥–ª—è main
	logger := logging.NewZerologLogger(cfg.Logging.Level, cfg.Logging.Format)
	ctx := context.Background()

	logger.Info(ctx, "üöÄ Starting URMS-OS API Server")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	dependencies, err := setupDependencies(cfg, logger)
	if err != nil {
		logger.Error(ctx, "‚ùå Failed to setup dependencies", "error", err)
		os.Exit(1)
	}

	// ‚úÖ –°–û–ó–î–ê–ï–ú –ò –ó–ê–ü–£–°–ö–ê–ï–ú –ú–ï–ù–ï–î–ñ–ï–† –§–û–ù–û–í–´–• –ó–ê–î–ê–ß –î–û HTTP –°–ï–†–í–ï–†–ê
	backgroundManager := services.NewBackgroundTaskManager(logger)

	// ‚úÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
	if cfg.Email.IMAP.PollInterval > 0 {
		emailPollerTask := email.NewEmailPollerTask(
			dependencies.EmailService,
			cfg.Email.IMAP.PollInterval,
			cfg.Email.IMAP.OperationTimeout,
			logger,
		)
		backgroundManager.RegisterTask(emailPollerTask)
	}

	// ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú –í–°–ï –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
	if err := backgroundManager.StartAll(ctx); err != nil {
		logger.Error(ctx, "‚ùå Failed to start background tasks", "error", err)
		os.Exit(1)
	}

	// ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° –ë–£–§–ï–†–ê –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê –§–û–ù–û–í–´–• –ó–ê–î–ê–ß
	os.Stdout.Sync()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL
	if cfg.Database.Provider == "postgres" {
		if err := runMigrations(cfg.Database.Postgres.DSN); err != nil {
			logger.Error(ctx, "‚ùå Database migrations failed", "error", err)
			os.Exit(1)
		}
		logger.Info(ctx, "‚úÖ Database migrations completed")
	}

	// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	server := setupHTTPServer(cfg, dependencies)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	go func() {
		logger.Info(ctx, "üåê Starting HTTP server", "port", cfg.Server.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Error(ctx, "‚ùå HTTP server failed", "error", err)
			os.Exit(1)
		}
	}()

	// ‚úÖ –ü–ï–†–ï–î–ê–ï–ú –ú–ï–ù–ï–î–ñ–ï–† –í waitForShutdown –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	waitForShutdown(server, dependencies, backgroundManager)
}

// Dependencies —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Dependencies struct {
	DB               *sqlx.DB
	EmailService     *services.EmailService
	HealthAggregator ports.HealthAggregator
	EmailGateway     ports.EmailGateway
	Logger           ports.Logger
	// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú Task Management —Å–µ—Ä–≤–∏—Å—ã
	TaskService     ports.TaskService
	CustomerService ports.CustomerService
}

// setupDependencies –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func setupDependencies(cfg *config.Config, logger ports.Logger) (*Dependencies, error) {
	deps := &Dependencies{
		Logger: logger,
	}

	logger.Info(context.Background(), "üõ†Ô∏è Initializing dependencies")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL
	if cfg.Database.Provider == "postgres" {
		db, err := setupDatabase(cfg.Database.Postgres)
		if err != nil {
			logger.Error(context.Background(), "Failed to setup database", "error", err)
			return nil, fmt.Errorf("failed to setup database: %w", err)
		}
		deps.DB = db
		logger.Info(context.Background(), "‚úÖ Connected to PostgreSQL database")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IMAP –∞–¥–∞–ø—Ç–µ—Ä —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
	deps.EmailGateway = setupIMAPAdapter(cfg, logger)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º email —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	emailRepo, err := persistence.NewEmailRepository(
		persistence.RepositoryType(cfg.Database.Provider),
		deps.DB,
	)
	if err != nil {
		logger.Error(context.Background(), "Failed to create email repository", "error", err)
		return nil, fmt.Errorf("failed to create email repository: %w", err)
	}

	// ‚úÖ –ü–ï–†–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Task Management —Å–µ—Ä–≤–∏—Å–æ–≤
	taskRepo := inmemory.NewTaskRepository(logger)
	customerRepo := inmemory.NewCustomerRepository(logger)
	userRepo := inmemory.NewUserRepository(logger)

	deps.TaskService = services.NewTaskService(taskRepo, customerRepo, userRepo, logger)
	deps.CustomerService = services.NewCustomerService(customerRepo, taskRepo, logger)

	logger.Info(context.Background(), "‚úÖ Task Management services initialized")

	// ‚úÖ –í–¢–û–†–û–ï: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ EmailService
	deps.EmailService = setupEmailServiceWithTaskServices(
		deps.EmailGateway,
		emailRepo,
		deps.TaskService,
		deps.CustomerService,
		logger,
	)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º health checks
	deps.HealthAggregator = setupHealthChecks(deps.EmailGateway, deps.DB)

	logger.Info(context.Background(), "‚úÖ Dependencies initialized successfully")

	return deps, nil
}

// setupDatabase –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
func setupDatabase(cfg config.PostgresConfig) (*sqlx.DB, error) {
	db, err := sqlx.Connect("postgres", cfg.DSN)
	if err != nil {
		return nil, fmt.Errorf("failed to connect to database: %w", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º connection pool
	db.SetMaxOpenConns(cfg.MaxOpenConns)
	db.SetMaxIdleConns(cfg.MaxIdleConns)
	db.SetConnMaxLifetime(cfg.ConnMaxLifetime)

	// ‚úÖ LOG: –£–±–∏—Ä–∞–µ–º log.Printf, –ª–æ–≥–∏—Ä—É–µ–º –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
	return db, nil
}

// setupIMAPAdapter –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç IMAP –∞–¥–∞–ø—Ç–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
func setupIMAPAdapter(cfg *config.Config, logger ports.Logger) ports.EmailGateway { // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú logger –ø–∞—Ä–∞–º–µ—Ç—Ä
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é IMAP –∫–ª–∏–µ–Ω—Ç–∞
	imapConfig := &imapclient.Config{
		Server:   cfg.Email.IMAP.Server,
		Port:     cfg.Email.IMAP.Port,
		Username: cfg.Email.IMAP.Username,
		Password: cfg.Email.IMAP.Password,
		Mailbox:  cfg.Email.IMAP.Mailbox,
		SSL:      cfg.Email.IMAP.SSL,
		Interval: cfg.Email.IMAP.PollInterval,
		ReadOnly: cfg.Email.IMAP.ReadOnly,
		Timeout:  cfg.Email.IMAP.OperationTimeout,

		// ‚úÖ NEW: Extended timeout configuration
		ConnectTimeout:   cfg.Email.IMAP.ConnectTimeout,
		LoginTimeout:     cfg.Email.IMAP.LoginTimeout,
		FetchTimeout:     cfg.Email.IMAP.FetchTimeout,
		OperationTimeout: cfg.Email.IMAP.OperationTimeout,
		PageSize:         cfg.Email.IMAP.PageSize,
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–µ—Ä–∞
	timeoutConfig := email.TimeoutConfig{
		ConnectTimeout:   cfg.Email.IMAP.ConnectTimeout,
		LoginTimeout:     cfg.Email.IMAP.LoginTimeout,
		FetchTimeout:     cfg.Email.IMAP.FetchTimeout,
		OperationTimeout: cfg.Email.IMAP.OperationTimeout,
		PageSize:         cfg.Email.IMAP.PageSize,
		MaxMessages:      cfg.Email.IMAP.MaxMessagesPerPoll,
		MaxRetries:       cfg.Email.IMAP.MaxRetries,
		RetryDelay:       cfg.Email.IMAP.RetryDelay,
	}

	// ‚úÖ –ó–ê–ú–ï–ù–Ø–ï–ú —Å—Ç–∞—Ä—ã–µ log.Printf –Ω–∞ structured logging
	logger.Info(context.Background(), "üîß IMAP Adapter configured with timeouts",
		"connect_timeout", timeoutConfig.ConnectTimeout,
		"login_timeout", timeoutConfig.LoginTimeout,
		"fetch_timeout", timeoutConfig.FetchTimeout,
		"operation_timeout", timeoutConfig.OperationTimeout,
		"page_size", timeoutConfig.PageSize,
		"max_messages", timeoutConfig.MaxMessages,
		"max_retries", timeoutConfig.MaxRetries)

	// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
	return email.NewIMAPAdapterWithTimeouts(imapConfig, timeoutConfig, logger)
}

// setupEmailServiceWithTaskServices –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç email —Å–µ—Ä–≤–∏—Å —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ Task —Å–µ—Ä–≤–∏—Å–∞–º–∏
func setupEmailServiceWithTaskServices(
	gateway ports.EmailGateway,
	repo ports.EmailRepository,
	taskService ports.TaskService,
	customerService ports.CustomerService,
	logger ports.Logger,
) *services.EmailService {
	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ email
	policy := domain.EmailProcessingPolicy{
		ReadOnlyMode:   true, // –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º read-only —Ä–µ–∂–∏–º
		AutoReply:      false,
		SpamFilter:     true,
		MaxMessageSize: 10 * 1024 * 1024, // 10MB
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ infrastructure
	idGenerator := id.NewUUIDGenerator()

	// ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ TaskService –∏ CustomerService
	messageProcessor := email.NewMessageProcessor(taskService, customerService, logger)
	logger.Info(context.Background(), "‚úÖ MessageProcessor activated with TaskService integration",
		"type", "MessageProcessor")

	return services.NewEmailService(
		gateway,
		repo,
		messageProcessor,
		idGenerator,
		policy,
		logger,
	)
}

// setupHealthChecks –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É health checks
func setupHealthChecks(imapAdapter ports.EmailGateway, db *sqlx.DB) ports.HealthAggregator {
	aggregator := health.NewHealthAggregator()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º health check –¥–ª—è Email Gateway —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
	if imapAdapter != nil {
		emailHealthChecker := email.NewEmailGatewayHealthAdapter(imapAdapter)
		aggregator.Register(emailHealthChecker)
	} else {
		log.Printf("‚ö†Ô∏è  Email gateway is nil, skipping health check")
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º health check –¥–ª—è PostgreSQL –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
	if db != nil {
		postgresChecker := postgres.NewPostgresHealthChecker(db)
		aggregator.Register(postgresChecker)
	}

	return aggregator
}

// setupGinRouter –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ—É—Ç–∏–Ω–≥ —Å Gin
func setupGinRouter(deps *Dependencies, logger ports.Logger) *gin.Engine {
	router := gin.Default()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
	middleware.SetupMiddleware(router, logger)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º handlers
	taskHandler := handlers.NewTaskHandler(deps.TaskService, logger)
	customerHandler := handlers.NewCustomerHandler(deps.CustomerService, deps.TaskService, logger)
	healthHandler := handlers.NewHealthHandler(deps.HealthAggregator)

	// API Routes v1
	api := router.Group("/api/v1")
	{
		// Tasks
		tasks := api.Group("/tasks")
		{
			tasks.GET("", taskHandler.ListTasks)
			tasks.POST("", taskHandler.CreateTask)
			tasks.POST("/support", taskHandler.CreateSupportTask)
			tasks.GET("/:id", taskHandler.GetTask)
			tasks.PUT("/:id", taskHandler.UpdateTask)
			tasks.DELETE("/:id", taskHandler.DeleteTask)
			tasks.PUT("/:id/status", taskHandler.ChangeStatus)
			tasks.PUT("/:id/assign", taskHandler.AssignTask)
			tasks.GET("/:id/messages", taskHandler.GetTaskMessages)
			tasks.POST("/:id/messages", taskHandler.AddMessage)
		}

		// Customers
		customers := api.Group("/customers")
		{
			customers.GET("", customerHandler.ListCustomers)
			customers.POST("", customerHandler.CreateCustomer)
			customers.GET("/find-or-create", customerHandler.FindOrCreateCustomer)
			customers.GET("/:id", customerHandler.GetCustomer)
			customers.PUT("/:id", customerHandler.UpdateCustomer)
			customers.DELETE("/:id", customerHandler.DeleteCustomer)
			customers.GET("/:id/profile", customerHandler.GetCustomerProfile)
			customers.GET("/:id/tasks", customerHandler.GetCustomerTasks)
		}
	}

	// System routes (legacy compatibility)
	router.GET("/health", healthHandler.HealthCheck)
	router.GET("/ready", healthHandler.ReadyCheck)
	router.GET("/live", healthHandler.LiveCheck)

	// Legacy test endpoint - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	router.POST("/test-imap", func(c *gin.Context) {
		ctx, cancel := context.WithTimeout(c.Request.Context(), 15*time.Second)
		defer cancel()

		criteria := ports.FetchCriteria{
			Mailbox:    "INBOX",
			Limit:      10,
			UnseenOnly: false,
			Since:      time.Now().Add(-1 * time.Hour),
		}

		startTime := time.Now()
		messages, err := deps.EmailGateway.FetchMessages(ctx, criteria)
		duration := time.Since(startTime)

		if err != nil {
			if errors.Is(err, context.DeadlineExceeded) {
				c.JSON(http.StatusRequestTimeout, gin.H{
					"error":    "IMAP test timeout",
					"duration": duration.String(),
				})
			} else {
				c.JSON(http.StatusInternalServerError, gin.H{
					"error":    "IMAP test failed",
					"details":  err.Error(),
					"duration": duration.String(),
				})
			}
			return
		}

		c.JSON(http.StatusOK, gin.H{
			"status":           "success",
			"messages_fetched": len(messages),
			"duration":         duration.String(),
			"timeout_config":   "active",
		})
	})

	// Root endpoint
	router.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"service":     "URMS-OS",
			"version":     "1.0.0",
			"status":      "running",
			"api_version": "v1",
		})
	})

	logger.Info(context.Background(), "‚úÖ Gin router configured with Task Management API")
	return router
}

// setupHTTPServer –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
func setupHTTPServer(cfg *config.Config, deps *Dependencies) *http.Server {
	// –°–æ–∑–¥–∞–µ–º Gin router
	router := setupGinRouter(deps, deps.Logger)

	return &http.Server{
		Addr:         fmt.Sprintf(":%d", cfg.Server.Port),
		Handler:      router,
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
	}
}

// runMigrations –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func runMigrations(dsn string) error {
	log.Printf("üèóÔ∏è  Running database migrations...")

	// TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ cmd/migrate
	// –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
	log.Printf("üìù Migration system would run here for DSN: %s", dsn)

	return nil
}

// waitForShutdown –æ–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ graceful shutdown
func waitForShutdown(server *http.Server, deps *Dependencies, bgManager *services.BackgroundTaskManager) {
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt, syscall.SIGTERM)
	<-quit

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	deps.Logger.Info(ctx, "üõë Shutting down server...")

	// ‚úÖ 1. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
	if err := bgManager.StopAll(ctx); err != nil {
		deps.Logger.Error(ctx, "‚ùå Error stopping background tasks", "error", err)
	}

	// ‚úÖ 2. –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HTTP –°–ï–†–í–ï–†
	if err := server.Shutdown(ctx); err != nil {
		deps.Logger.Error(ctx, "‚ùå Server shutdown error", "error", err)
	}

	// ‚úÖ 3. –ó–ê–ö–†–´–í–ê–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–Ø –° –ë–î (–í–ê–ñ–ù–û!)
	if deps.DB != nil {
		if err := deps.DB.Close(); err != nil {
			deps.Logger.Error(ctx, "‚ùå Database connection close error", "error", err)
		} else {
			deps.Logger.Info(ctx, "‚úÖ Database connections closed")
		}
	}

	deps.Logger.Info(ctx, "‚úÖ Server stopped gracefully")
}
